/// Copyright Â© 2021-2022
/// Author: Antonio Caggiano <info@antoniocaggiano.eu>
/// SPDX-License-Identifier: MIT
/// AUTOGENERATED: please do not delete it unless you want to regenerate it from scratch
use std::{collections::HashMap, rc::Rc};
use vkr_core::{
    ash::{self, vk},
    *,
};
pub struct MainPipelineCache {
    sets: HashMap<usize, Vec<vk::DescriptorSet>>,
    pool: vk::DescriptorPool,
    pub device: Rc<ash::Device>,
}
impl MainPipelineCache {
    pub fn new(device: &Rc<ash::Device>) -> Self {
        let pool = unsafe {
            let uniform_count = 32;
            let uniform_pool_size = vk::DescriptorPoolSize::builder()
                .descriptor_count(uniform_count)
                .ty(vk::DescriptorType::UNIFORM_BUFFER)
                .build();
            let sampler_count = 16;
            let sampler_pool_size = vk::DescriptorPoolSize::builder()
                .descriptor_count(sampler_count)
                .ty(vk::DescriptorType::COMBINED_IMAGE_SAMPLER)
                .build();
            let input_count = 3;
            let input_pool_size = vk::DescriptorPoolSize::builder()
                .descriptor_count(input_count)
                .ty(vk::DescriptorType::INPUT_ATTACHMENT)
                .build();
            let set_count = 16;
            let pool_sizes = vec![uniform_pool_size, sampler_pool_size, input_pool_size];
            let create_info = vk::DescriptorPoolCreateInfo::builder()
                .pool_sizes(&pool_sizes)
                .max_sets(set_count)
                .flags(vk::DescriptorPoolCreateFlags::FREE_DESCRIPTOR_SET)
                .build();
            device
                .create_descriptor_pool(&create_info, None)
                .expect("Failed to create Vulkan descriptor pool")
        };
        Self {
            sets: HashMap::new(),
            pool,
            device: device.clone(),
        }
    }
    pub fn allocate(&mut self, layouts: &[vk::DescriptorSetLayout]) -> Vec<vk::DescriptorSet> {
        let create_info = vk::DescriptorSetAllocateInfo::builder()
            .descriptor_pool(self.pool)
            .set_layouts(layouts)
            .build();
        unsafe { self.device.allocate_descriptor_sets(&create_info) }
            .expect("Failed to allocate Vulkan descriptor sets")
    }
    pub fn free(&self, descriptors: &[vk::DescriptorSet]) {
        unsafe {
            self.device
                .free_descriptor_sets(self.pool, descriptors)
                .expect("msFailed to free descriptor sets");
        }
    }
}
impl Drop for MainPipelineCache {
    fn drop(&mut self) {
        unsafe { self.device.destroy_descriptor_pool(self.pool, None) };
    }
}
pub struct MainPipeline {
    /// A pipeline cache for each frame
    caches: Vec<MainPipelineCache>,
    pipeline: vk::Pipeline,
    layout: vk::PipelineLayout,
    /// A pipeline can have multiple descriptor set layouts.
    /// This can be useful for binding at different frequencies.
    set_layouts: Vec<vk::DescriptorSetLayout>,
    device: Rc<ash::Device>,
}
impl MainPipeline {
    /// If I understand it correctly, a descriptor set may have multiple bindings
    fn get_set_layout_bindings() -> Vec<vk::DescriptorSetLayoutBinding> {
        vec![vk::DescriptorSetLayoutBinding::builder()
            .binding(0u32)
            .descriptor_type(vk::DescriptorType::UNIFORM_BUFFER)
            .descriptor_count(1u32)
            .stage_flags(vk::ShaderStageFlags::VERTEX)
            .build()]
    }
    /// Different descriptor sets can be bound and updated at different times?
    /// I could use one desc set for the model matrix, but then I would need to
    /// call write_set for each node.
    /// A different approach would be creating a desc set for each node, but there
    /// is a limit to the number of sets that a pool can create, right?
    fn get_set_layouts(device: &Rc<ash::Device>) -> Vec<vk::DescriptorSetLayout> {
        let set_layout_bindings = Self::get_set_layout_bindings();
        let set_layout_info =
            vk::DescriptorSetLayoutCreateInfo::builder().bindings(&set_layout_bindings);
        let set_layout = unsafe { device.create_descriptor_set_layout(&set_layout_info, None) }
            .expect("Failed to create Vulkan descriptor set layout");
        vec![set_layout]
    }
    pub fn new<V: VertexInput>(
        dev: &mut Dev,
        topology: vk::PrimitiveTopology,
        pass: &Pass,
        width: u32,
        height: u32,
    ) -> Self {
        let set_layouts = Self::get_set_layouts(&dev.device);
        let layout = {
            let create_info = vk::PipelineLayoutCreateInfo::builder()
                .set_layouts(&set_layouts)
                .build();
            unsafe { dev.device.create_pipeline_layout(&create_info, None) }
                .expect("Failed to create Vulkan pipeline layout")
        };
        #[allow(clippy::octal_escapes)]
        let pipeline = {
            let frag_mod = ShaderModule::new(
                &dev.device,
                b"\x03\x02#\x07\0\0\x01\0\x08\0\r\0\r\0\0\0\0\0\0\0\x11\0\x02\0\x01\0\0\0\x0B\0\x06\0\x01\0\0\0GLSL.std.450\0\0\0\0\x0E\0\x03\0\0\0\0\0\x01\0\0\0\x0F\0\x07\0\x04\0\0\0\x04\0\0\0main\0\0\0\0\t\0\0\0\x0B\0\0\0\x10\0\x03\0\x04\0\0\0\x07\0\0\0\x03\0\x03\0\x02\0\0\0\xC2\x01\0\0\x04\0\n\0GL_GOOGLE_cpp_style_line_directive\0\0\x04\0\x08\0GL_GOOGLE_include_directive\0\x05\0\x04\0\x04\0\0\0main\0\0\0\0\x05\0\x05\0\t\0\0\0out_color\0\0\0\x05\0\x05\0\x0B\0\0\0in_color\0\0\0\0G\0\x04\0\t\0\0\0\x1E\0\0\0\0\0\0\0G\0\x04\0\x0B\0\0\0\x1E\0\0\0\0\0\0\0\x13\0\x02\0\x02\0\0\0!\0\x03\0\x03\0\0\0\x02\0\0\0\x16\0\x03\0\x06\0\0\0 \0\0\0\x17\0\x04\0\x07\0\0\0\x06\0\0\0\x04\0\0\0 \0\x04\0\x08\0\0\0\x03\0\0\0\x07\0\0\0;\0\x04\0\x08\0\0\0\t\0\0\0\x03\0\0\0 \0\x04\0\n\0\0\0\x01\0\0\0\x07\0\0\0;\0\x04\0\n\0\0\0\x0B\0\0\0\x01\0\0\06\0\x05\0\x02\0\0\0\x04\0\0\0\0\0\0\0\x03\0\0\0\xF8\0\x02\0\x05\0\0\0=\0\x04\0\x07\0\0\0\x0C\0\0\0\x0B\0\0\0>\0\x03\0\t\0\0\0\x0C\0\0\0\xFD\0\x01\08\0\x01\0",
            );
            let vert_mod = ShaderModule::new(
                &dev.device,
                b"\x03\x02#\x07\0\0\x01\0\x08\0\r\0$\0\0\0\0\0\0\0\x11\0\x02\0\x01\0\0\0\x0B\0\x06\0\x01\0\0\0GLSL.std.450\0\0\0\0\x0E\0\x03\0\0\0\0\0\x01\0\0\0\x0F\0\t\0\0\0\0\0\x04\0\0\0main\0\0\0\0\t\0\0\0\x0B\0\0\0\x0F\0\0\0\x1B\0\0\0\x03\0\x03\0\x02\0\0\0\xC2\x01\0\0\x04\0\n\0GL_GOOGLE_cpp_style_line_directive\0\0\x04\0\x08\0GL_GOOGLE_include_directive\0\x05\0\x04\0\x04\0\0\0main\0\0\0\0\x05\0\x05\0\t\0\0\0out_color\0\0\0\x05\0\x05\0\x0B\0\0\0in_color\0\0\0\0\x05\0\x06\0\r\0\0\0gl_PerVertex\0\0\0\0\x06\0\x06\0\r\0\0\0\0\0\0\0gl_Position\0\x05\0\x03\0\x0F\0\0\0\0\0\0\0\x05\0\x03\0\x13\0\0\0Mvp\0\x06\0\x05\0\x13\0\0\0\0\0\0\0model\0\0\0\x05\0\x03\0\x15\0\0\0mvp\0\x05\0\x04\0\x1B\0\0\0in_pos\0\0G\0\x04\0\t\0\0\0\x1E\0\0\0\0\0\0\0G\0\x04\0\x0B\0\0\0\x1E\0\0\0\x01\0\0\0H\0\x05\0\r\0\0\0\0\0\0\0\x0B\0\0\0\0\0\0\0G\0\x03\0\r\0\0\0\x02\0\0\0H\0\x04\0\x13\0\0\0\0\0\0\0\x05\0\0\0H\0\x05\0\x13\0\0\0\0\0\0\0#\0\0\0\0\0\0\0H\0\x05\0\x13\0\0\0\0\0\0\0\x07\0\0\0\x10\0\0\0G\0\x03\0\x13\0\0\0\x02\0\0\0G\0\x04\0\x15\0\0\0\"\0\0\0\0\0\0\0G\0\x04\0\x15\0\0\0!\0\0\0\0\0\0\0G\0\x04\0\x1B\0\0\0\x1E\0\0\0\0\0\0\0\x13\0\x02\0\x02\0\0\0!\0\x03\0\x03\0\0\0\x02\0\0\0\x16\0\x03\0\x06\0\0\0 \0\0\0\x17\0\x04\0\x07\0\0\0\x06\0\0\0\x04\0\0\0 \0\x04\0\x08\0\0\0\x03\0\0\0\x07\0\0\0;\0\x04\0\x08\0\0\0\t\0\0\0\x03\0\0\0 \0\x04\0\n\0\0\0\x01\0\0\0\x07\0\0\0;\0\x04\0\n\0\0\0\x0B\0\0\0\x01\0\0\0\x1E\0\x03\0\r\0\0\0\x07\0\0\0 \0\x04\0\x0E\0\0\0\x03\0\0\0\r\0\0\0;\0\x04\0\x0E\0\0\0\x0F\0\0\0\x03\0\0\0\x15\0\x04\0\x10\0\0\0 \0\0\0\x01\0\0\0+\0\x04\0\x10\0\0\0\x11\0\0\0\0\0\0\0\x18\0\x04\0\x12\0\0\0\x07\0\0\0\x04\0\0\0\x1E\0\x03\0\x13\0\0\0\x12\0\0\0 \0\x04\0\x14\0\0\0\x02\0\0\0\x13\0\0\0;\0\x04\0\x14\0\0\0\x15\0\0\0\x02\0\0\0 \0\x04\0\x16\0\0\0\x02\0\0\0\x12\0\0\0\x17\0\x04\0\x19\0\0\0\x06\0\0\0\x03\0\0\0 \0\x04\0\x1A\0\0\0\x01\0\0\0\x19\0\0\0;\0\x04\0\x1A\0\0\0\x1B\0\0\0\x01\0\0\0+\0\x04\0\x06\0\0\0\x1D\0\0\0\0\0\x80?6\0\x05\0\x02\0\0\0\x04\0\0\0\0\0\0\0\x03\0\0\0\xF8\0\x02\0\x05\0\0\0=\0\x04\0\x07\0\0\0\x0C\0\0\0\x0B\0\0\0>\0\x03\0\t\0\0\0\x0C\0\0\0A\0\x05\0\x16\0\0\0\x17\0\0\0\x15\0\0\0\x11\0\0\0=\0\x04\0\x12\0\0\0\x18\0\0\0\x17\0\0\0=\0\x04\0\x19\0\0\0\x1C\0\0\0\x1B\0\0\0Q\0\x05\0\x06\0\0\0\x1E\0\0\0\x1C\0\0\0\0\0\0\0Q\0\x05\0\x06\0\0\0\x1F\0\0\0\x1C\0\0\0\x01\0\0\0Q\0\x05\0\x06\0\0\0 \0\0\0\x1C\0\0\0\x02\0\0\0P\0\x07\0\x07\0\0\0!\0\0\0\x1E\0\0\0\x1F\0\0\0 \0\0\0\x1D\0\0\0\x91\0\x05\0\x07\0\0\0\"\0\0\0\x18\0\0\0!\0\0\0A\0\x05\0\x08\0\0\0#\0\0\0\x0F\0\0\0\x11\0\0\0>\0\x03\0#\0\0\0\"\0\0\0\xFD\0\x01\08\0\x01\0",
            );
            let entrypoint =
                std::ffi::CString::new("main").expect("Failed to create main entrypoint");
            let vert_stage = vk::PipelineShaderStageCreateInfo::builder()
                .stage(vk::ShaderStageFlags::VERTEX)
                .module(vert_mod.shader)
                .name(&entrypoint)
                .build();
            let frag_stage = vk::PipelineShaderStageCreateInfo::builder()
                .stage(vk::ShaderStageFlags::FRAGMENT)
                .module(frag_mod.shader)
                .name(&entrypoint)
                .build();
            let vertex_bindings = V::get_bindings();
            let vertex_attributes = V::get_attributes();
            let vertex_input = vk::PipelineVertexInputStateCreateInfo::builder()
                .vertex_attribute_descriptions(&vertex_attributes)
                .vertex_binding_descriptions(&vertex_bindings)
                .build();
            let input_assembly = vk::PipelineInputAssemblyStateCreateInfo::builder()
                .topology(topology)
                .primitive_restart_enable(false)
                .build();
            let raster_state = vk::PipelineRasterizationStateCreateInfo::builder()
                .depth_clamp_enable(false)
                .rasterizer_discard_enable(false)
                .polygon_mode(vk::PolygonMode::FILL)
                .cull_mode(vk::CullModeFlags::NONE)
                .front_face(vk::FrontFace::COUNTER_CLOCKWISE)
                .depth_bias_enable(false)
                .line_width(1.0)
                .build();
            let viewport = [vk::Viewport::builder()
                .x(0.0)
                .y(0.0)
                .width(width as f32)
                .height(height as f32)
                .min_depth(0.0)
                .max_depth(1.0)
                .build()];
            let scissor = [vk::Rect2D::builder()
                .offset(vk::Offset2D::builder().x(0).y(0).build())
                .extent(vk::Extent2D::builder().width(width).height(height).build())
                .build()];
            let view_state = vk::PipelineViewportStateCreateInfo::builder()
                .viewports(&viewport)
                .scissors(&scissor)
                .build();
            let multisample_state = vk::PipelineMultisampleStateCreateInfo::builder()
                .rasterization_samples(vk::SampleCountFlags::TYPE_1)
                .sample_shading_enable(false)
                .alpha_to_coverage_enable(false)
                .alpha_to_one_enable(false)
                .build();
            let blend_attachment = [vk::PipelineColorBlendAttachmentState::builder()
                .blend_enable(false)
                .color_write_mask(vk::ColorComponentFlags::RGBA)
                .build()];
            let blend_state = vk::PipelineColorBlendStateCreateInfo::builder()
                .logic_op_enable(false)
                .attachments(&blend_attachment)
                .build();
            let stages = [vert_stage, frag_stage];
            let create_info = [vk::GraphicsPipelineCreateInfo::builder()
                .stages(&stages)
                .vertex_input_state(&vertex_input)
                .input_assembly_state(&input_assembly)
                .viewport_state(&view_state)
                .rasterization_state(&raster_state)
                .multisample_state(&multisample_state)
                .color_blend_state(&blend_state)
                .render_pass(pass.render)
                .subpass(0)
                .layout(layout)
                .build()];
            let pipelines = unsafe {
                dev.device
                    .create_graphics_pipelines(vk::PipelineCache::null(), &create_info, None)
            }
            .expect("Failed to create Vulkan graphics pipeline");
            pipelines[0]
        };
        Self {
            caches: vec![],
            pipeline,
            layout,
            set_layouts,
            device: Rc::clone(&dev.device),
        }
    }
    /// Returns the cache associated to a frame, creating it on demand
    pub fn get_cache(&mut self, frame_index: usize) -> &mut MainPipelineCache {
        while frame_index >= self.caches.len() {
            self.caches.push(MainPipelineCache::new(&self.device));
        }
        &mut self.caches[frame_index]
    }
    /// We do not know whether descriptor sets are allocated together and stored in a vector
    /// or they are allocated one by one, therefore we just expect one descriptor set here.
    pub fn bind_mvp(&self, set: vk::DescriptorSet) {
        let writes = [vk::WriteDescriptorSet::builder()
            .dst_set(set)
            .dst_binding(0u32)
            .dst_array_element(0)
            .descriptor_type(vk::DescriptorType::UNIFORM_BUFFER)
            .build()];
        unsafe {
            self.device.update_descriptor_sets(&writes, &[]);
        }
    }
}
impl Drop for MainPipeline {
    fn drop(&mut self) {
        unsafe {
            for set_layout in &self.set_layouts {
                self.device.destroy_descriptor_set_layout(*set_layout, None);
            }
            self.device.destroy_pipeline_layout(self.layout, None);
            self.device.destroy_pipeline(self.pipeline, None);
        }
    }
}
impl Pipeline for MainPipeline {
    fn get_pipeline(&self) -> vk::Pipeline {
        self.pipeline
    }
    fn get_layout(&self) -> vk::PipelineLayout {
        self.layout
    }
    fn get_set_layouts(&self) -> &[vk::DescriptorSetLayout] {
        &self.set_layouts
    }
}
